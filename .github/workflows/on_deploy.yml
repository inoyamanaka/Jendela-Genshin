# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Jendela Genshin

# This workflow is triggered on pushes to the repository.

on:
  push:
    branches:
    - master
    tags:
      - "on_deploy"
    
# on: push    # Default will running for every branch.
    
jobs:
  build:
    # This job will run on ubuntu virtual machine
    runs-on: ubuntu-latest
    env:
      FIREBASE_CLI_TOKEN: ${{secrets.FIREBASE_CLI_TOKEN}}
      FIREBASE_APP_ID: ${{secrets.FIREBASE_APP_ID}}
      ANDROID_KEY_ALIAS: ${{secrets.ANDROID_KEY_ALIAS}}
      ANDROID_KEY_PASSWORD: ${{secrets.ANDROID_KEY_PASSWORD}}
      ANDROID_STORE_PASSWORD: ${{secrets.ANDROID_STORE_PASSWORD}}
      ANDROID_SIGNING_KEY: ${{secrets.ANDROID_SIGNING_KEY}}
      PRIVATE_SERVICE_ACCOUNT_KEY : ${{ secrets.PRIVATE_SERVICE_ACCOUNT_KEY }}

    steps:
     # Setup Java environment in order to build the Android app.
    - uses: actions/checkout@v3

    # Set Current Date As Env Variable
    - name: Set current date as env variable
      run: echo "date_today=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

    # Set Repository Name As Env Variable
    - name: Set repository name as env variable
      run: echo "repository_name=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')" >> $GITHUB_ENV
    
    # Setup the JDK
    - name: Set Up JDK
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '17'
        cache: 'gradle'

    - name: Give permission
      run: chmod +x /home/runner/work/Jendela-Genshin/Jendela-Genshin/android/gradlew

    # Setup the flutter environment.
    - uses: subosito/flutter-action@v1
      with:
        channel: 'beta' # 'dev', 'alpha', default to: 'stable'
        # flutter-version: '1.12.x' # you can also specify exact version of flutter
    
    # Get flutter dependencies.
    - name: Install Package
      run: flutter pub get

    - name: Decode Keystore File
      uses: timheuer/base64-to-file@v1
      id: android_keystore
      with:
        fileName: "android_keystore.keystore"
        encodedString: ${{ secrets.ANDROID_SIGNING_KEY }}

    - name: Create key.properties
      run: |
        echo "storeFile=${{ steps.android_keystore.outputs.filePath }}" > android/key.properties
        echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" >> android/key.properties
        echo "storePassword=${{ secrets.ANDROID_STORE_PASSWORD }}" >> android/key.properties
        echo "keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}" >> android/key.properties

    - name: Build release app bundle
      run: flutter build appbundle --flavor development --target lib/main_development.dart

    - name: Sign App Bundle
      uses: r0adkll/sign-android-release@v1   
      id: sign_app
      with:
        releaseDirectory: build/app/outputs/bundle/developmentRelease/
        signingKeyBase64: ${{ secrets.ANDROID_SIGNING_KEY }}
        alias: ${{ secrets.ANDROID_KEY_ALIAS }}         
        keyStorePassword: ${{ secrets.ANDROID_STORE_PASSWORD }}             
        keyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}

     # Save the APK after the Build job is complete to publish it as a Github release in the next job
    - name: Upload APP BUNDLE
      uses: actions/upload-artifact@v3.1.2
      with:
          name: Jendela Genshin
          path: build/app/outputs/bundle/developmentRelease/

    
    - name: Set up Ruby 3.1
      uses: ruby/setup-ruby@b256bd96bb4867e7d23e92e087d9bb697270b725
      with:
        ruby-version: 3.1
    

    - name: Install bundle
      run: |
          sudo gem install bundler
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
          

    - name: Create Firebase Service Credentials file
      run: |
          echo "$PRIVATE_SERVICE_ACCOUNT_KEY" > firebase_credentials.json.b64
          base64 -d -i firebase_credentials.json.b64 > firebase_credentials.json
      env:
          PRIVATE_SERVICE_ACCOUNT_KEY: ${{ secrets.PRIVATE_SERVICE_ACCOUNT_KEY }}

    - name: Install Firebase app distribution plugin
      run: sudo fastlane add_plugin firebase_app_distribution

    - name: Decode Service Account Key JSON File
      uses: timheuer/base64-to-file@v1
      id: service_account_json_file
      with:
        fileName: "serviceAccount.json"
        encodedString: ${{ secrets.PRIVATE_SERVICE_ACCOUNT_KEY }}

    - name: Distribute app with ðŸ”¥ App Distribution ðŸš€
      run: bundle exec fastlane deploy
      env:
        FIREBASE_CLI_TOKEN: ${{secrets.FIREBASE_CLI_TOKEN}}
        FIREBASE_APP_ID: ${{secrets.FIREBASE_APP_ID}}
        ANDROID_KEY_ALIAS: ${{secrets.ANDROID_KEY_ALIAS}}
        ANDROID_KEY_PASSWORD: ${{secrets.ANDROID_KEY_PASSWORD}}
        ANDROID_STORE_PASSWORD: ${{secrets.ANDROID_STORE_PASSWORD}}
        ANDROID_SIGNING_KEY: ${{ steps.android_keystore.outputs.filePath }}
        PRIVATE_SERVICE_ACCOUNT_KEY : ${{ steps.service_account_json_file.outputs.filePath }}

   
  
    
    # Check for any formatting issues in the code.
    # - run: flutter format --set-exit-if-changed .
    
    # Statically analyze the Dart code for any errors.
    # - run: flutter analyze .
    
    # Run widget tests for our flutter project.
    # - run: flutter test
  