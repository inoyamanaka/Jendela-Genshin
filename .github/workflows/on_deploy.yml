# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Jendela Genshin

# This workflow is triggered on pushes to the repository.

on:
  push:
    branches:
    - master
    tags:
      - "on_deploy"
    
# on: push    # Default will running for every branch.
    
jobs:
  build:
    # This job will run on ubuntu virtual machine
    runs-on: ubuntu-latest
    env:
      FIREBASE_CLI_TOKEN: ${{secrets.FIREBASE_CLI_TOKEN}}
      FIREBASE_APP_ID: ${{secrets.FIREBASE_APP_ID}}
      ANDROID_KEY_ALIAS: ${{secrets.ANDROID_KEY_ALIAS}}
      ANDROID_KEY_PASSWORD: ${{secrets.ANDROID_KEY_PASSWORD}}
      ANDROID_STORE_PASSWORD: ${{secrets.ANDROID_STORE_PASSWORD}}
      ANDROID_SIGNING_KEY: ${{secrets.ANDROID_SIGNING_KEY}}
      PRIVATE_SERVICE_ACCOUNT_KEY : ${{ secrets.PRIVATE_SERVICE_ACCOUNT_KEY }}

    steps:
    - name: Git checkout
      uses: actions/checkout@v3

    - name: 🐦 Setup Shorebird
      uses: shorebirdtech/setup-shorebird@v0

    - name: Set up Ruby 3.1
      uses: ruby/setup-ruby@ec02537da5712d66d4d50a0f33b7eb52773b5ed1
      with:
        ruby-version: 3.1

    - name: Install bundle
      run: |
          sudo gem install bundler
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
    
    # Setup the JDK
    - name: Set Up JDK
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '17'
        cache: 'gradle'

    - name: Give permission
      run: chmod +x /home/runner/work/Jendela-Genshin/Jendela-Genshin/android/gradlew

    # Setup the flutter environment.
    - uses: subosito/flutter-action@v1
      with:
        channel: 'beta'
    
    # Get flutter dependencies.
    - name: Install Package
      run: flutter pub get

    - name: Decode Keystore File
      run: echo "${{ secrets.ANDROID_SIGNING_KEY }}" | base64 --decode > android/key.jks

 
    - name: Build release app bundle
      run: |
        export SHOREBIRD_TOKEN="$SHOREBIRD_TOKEN"
        shorebird release android --artifact apk --flavor development --target lib/main_development.dart
      env:
          SHOREBIRD_TOKEN: ${{ secrets.SHOREBIRD_TOKEN }}

    - name: Upload APP BUNDLE
      uses: actions/upload-artifact@v3.1.2
      with:
          name: Jendela Genshin
          path: build/app/outputs/bundle/developmentRelease/
          
    - name: Create Firebase Service Credentials file
      run: |
          echo "$PRIVATE_SERVICE_ACCOUNT_KEY" > firebase_credentials.json.b64
          base64 -d -i firebase_credentials.json.b64 > firebase_credentials.json
      env:
          PRIVATE_SERVICE_ACCOUNT_KEY: ${{ secrets.PRIVATE_SERVICE_ACCOUNT_KEY }}

    - name: Install Firebase app distribution plugin
      run: sudo fastlane add_plugin firebase_app_distribution

    - name: Decode Service Account Key JSON File
      uses: timheuer/base64-to-file@v1
      id: service_account_json_file
      with:
        fileName: "serviceAccount.json"
        encodedString: ${{ secrets.PRIVATE_SERVICE_ACCOUNT_KEY }}

    - name: Distribute app with 🔥 App Distribution 🚀
      run: bundle exec fastlane deploy
      # env:
      #   FIREBASE_CLI_TOKEN: ${{secrets.FIREBASE_CLI_TOKEN}}
      #   FIREBASE_APP_ID: ${{secrets.FIREBASE_APP_ID}}
      #   ANDROID_KEY_ALIAS: ${{secrets.ANDROID_KEY_ALIAS}}
      #   ANDROID_KEY_PASSWORD: ${{secrets.ANDROID_KEY_PASSWORD}}
      #   ANDROID_STORE_PASSWORD: ${{secrets.ANDROID_STORE_PASSWORD}}
      #   ANDROID_SIGNING_KEY: ${{ steps.android_keystore.outputs.filePath }}
      #   PRIVATE_SERVICE_ACCOUNT_KEY : ${{ steps.service_account_json_file.outputs.filePath }}